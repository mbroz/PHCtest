Fix build on Linux.
---
 Argon-Optimized/Linux-AES-NI/Argon-Optimized.cpp |   12 +++++++++---
 Argon-Optimized/Linux-AES-NI/aes.cpp             |    2 +-
 Argon-Optimized/Linux-AES-NI/data.h              |    8 +++++---
 Argon-Optimized/Linux-AES-NI/genkat.cpp          |    2 +-
 Argon-Reference/Argon-Reference.cpp              |   21 +++++++++++----------
 Argon-Reference/blake2.h                         |    2 +-
 6 files changed, 28 insertions(+), 19 deletions(-)

Index: argon/Argon-Reference/Argon-Reference.cpp
===================================================================
--- argon.orig/Argon-Reference/Argon-Reference.cpp	2015-02-26 17:19:51.864630302 +0100
+++ argon/Argon-Reference/Argon-Reference.cpp	2015-03-15 08:55:05.519664412 +0100
@@ -1,12 +1,13 @@
 #include "stdio.h"
 
-#include "wmmintrin.h"
-#include <immintrin.h> 
-#include <intrin.h>
+//#include "wmmintrin.h"
+//#include <immintrin.h> 
+//#include <intrin.h>
 #include <stdint.h>
 #include <time.h> 
 
-#include <string>
+#include <string.h>
+#include <vector>
 using namespace std;
 
 #include "blake2.h"
@@ -163,7 +164,7 @@ int ArgonRef(uint8_t *out, uint32_t outl
 
 	blake2b_final(&BlakeHash, (uint8_t*)input_hash, 32);	
 
-#if defined KATINT
+#ifdef KATINT
 	fprintf(fp, "Input hash:\n");
 	for (unsigned i = 0; i<4; ++i)
 	{
@@ -178,7 +179,7 @@ int ArgonRef(uint8_t *out, uint32_t outl
 	state = new int128[state_size];
 	if(state==NULL)
 		return 1;
-	printf("Memory allocated: %d KBytes\n",state_size*sizeof(int128)/(1<<10));
+	//printf("Memory allocated: %d KBytes\n",state_size*sizeof(int128)/(1<<10));
 
 	for(unsigned i=0; i<state_size; ++i)
 	{
@@ -277,7 +278,7 @@ int ArgonRef(uint8_t *out, uint32_t outl
 		fprintf(fp,"%2.2x ",((uint8_t*)out)[i]);
 	fprintf(fp,"\n");
 	fclose(fp);
-#endif KAT
+#endif
 	
 
 	delete state;
@@ -289,8 +290,8 @@ int ArgonRef(uint8_t *out, uint32_t outl
 
 
 
-int PHS(void *out, size_t outlen, const void *in, size_t inlen, const void *salt, uint32_t  saltlen, 
-	uint32_t t_cost, uint32_t m_cost)
+extern "C" int PHS(void *out, size_t outlen, const void *in, size_t inlen, const void *salt, size_t saltlen, 
+	unsigned int t_cost, unsigned int m_cost)
 {
-	return ArgonRef((uint8_t*)out, outlen, (const uint8_t*)in, inlen, (const uint8_t*)salt, saltlen, NULL, 0, NULL,0, t_cost, m_cost,1);
+	return ArgonRef((uint8_t*)out, outlen, (const uint8_t*)in, inlen, (const uint8_t*)salt, (uint32_t)saltlen, NULL, 0, NULL, 0, (uint32_t)t_cost, (uint32_t)m_cost, 1);
 }
Index: argon/Argon-Reference/blake2.h
===================================================================
--- argon.orig/Argon-Reference/blake2.h	2015-02-26 17:19:51.864630302 +0100
+++ argon/Argon-Reference/blake2.h	2015-02-26 17:19:51.860630274 +0100
@@ -143,7 +143,7 @@ extern "C" {
   int blake2sp( uint8_t *out, const void *in, const void *key, const uint8_t outlen, const uint64_t inlen, uint8_t keylen );
   int blake2bp( uint8_t *out, const void *in, const void *key, const uint8_t outlen, const uint64_t inlen, uint8_t keylen );
 
-  static _inline int blake2( uint8_t *out, const void *in, const void *key, const uint8_t outlen, const uint64_t inlen, uint8_t keylen )
+  static inline int blake2( uint8_t *out, const void *in, const void *key, const uint8_t outlen, const uint64_t inlen, uint8_t keylen )
   {
     return blake2b( out, in, key, outlen, inlen, keylen );
   }
Index: argon/Argon-Optimized/Linux-AES-NI/data.h
===================================================================
--- argon.orig/Argon-Optimized/Linux-AES-NI/data.h	2015-02-26 17:19:51.864630302 +0100
+++ argon/Argon-Optimized/Linux-AES-NI/data.h	2015-03-15 09:03:17.650517075 +0100
@@ -1,7 +1,7 @@
 
 //#define KAT
 //#define KAT_INTERNAL
-#define _MEASURE
+//#define _MEASURE
 //#define _MEASUREINT 
 #define THREADING
 #define RANDOMIZE //make slice selection pseudo-random
@@ -54,5 +54,7 @@ struct int128{
 extern  void AES_reduced_batch_intr(__m128i* batch, uint32_t batch_size);
 extern int ArgonFast64Ext(uint8_t *out, uint32_t outlen, const uint8_t *pwd, uint32_t pwdlen, const uint8_t *salt, uint32_t saltlen, const uint8_t *secret,
 uint8_t secretlen, const void *ad, uint32_t adlen, uint32_t t_cost, uint32_t m_cost, uint8_t parallel_degree);
-extern int PHS(void *out, size_t outlen, const void *in, size_t inlen, const void *salt, size_t saltlen,
-	uint32_t t_cost, size_t m_cost, uint32_t thread_n);
\ No newline at end of file
+extern "C" int PHS(void *out, size_t outlen, const void *in, size_t inlen, const void *salt, size_t saltlen,
+	unsigned int t_cost, unsigned int m_cost);
+extern "C" int PHSx(void *out, size_t outlen, const void *in, size_t inlen, const void *salt, size_t saltlen,
+	unsigned int t_cost, unsigned int m_cost, unsigned int m_thread);
\ No newline at end of file
Index: argon/Argon-Optimized/Linux-AES-NI/aes.cpp
===================================================================
--- argon.orig/Argon-Optimized/Linux-AES-NI/aes.cpp	2015-01-31 10:49:55.000000000 +0100
+++ argon/Argon-Optimized/Linux-AES-NI/aes.cpp	2015-02-26 17:24:25.486562691 +0100
@@ -93,7 +93,7 @@ const static unsigned char sbox[256] = {
 
 
 
-inline void AES_reduced_batch_intr(__m128i* batch, uint32_t batch_size) //Encrypts batch_size in parallel
+/*inline*/ void AES_reduced_batch_intr(__m128i* batch, uint32_t batch_size) //Encrypts batch_size in parallel
 {
 	//Round Key initialization
 	__m128i roundkey[AES_ROUNDS + 1];
Index: argon/Argon-Optimized/Linux-AES-NI/Argon-Optimized.cpp
===================================================================
--- argon.orig/Argon-Optimized/Linux-AES-NI/Argon-Optimized.cpp	2015-02-28 19:47:28.903109976 +0100
+++ argon/Argon-Optimized/Linux-AES-NI/Argon-Optimized.cpp	2015-03-15 09:03:53.350723669 +0100
@@ -6,7 +6,7 @@
 //To enable measurement of SubGroups and ShuffleSlices, uncomment #define _MEASUREINT
 //Threading is always enabled
 
-
+#define __STDC_FORMAT_MACROS
 #include "stdio.h"
 #include "stdint.h"
 #include "inttypes.h"
@@ -523,7 +523,13 @@ for (unsigned l = 0; l <t_cost; ++l)
 
 
 int PHS(void *out, size_t outlen, const void *in, size_t inlen, const void *salt, size_t saltlen, 
-	uint32_t t_cost, size_t m_cost, uint32_t thread_n=1)
+	unsigned int t_cost, unsigned int m_cost)
+{
+	return ArgonFast64Ext((uint8_t*)out, (uint32_t)outlen, (const uint8_t*)in, (uint32_t)inlen, (const uint8_t*)salt, (uint32_t)saltlen, NULL, 0, NULL, 0, (uint32_t)t_cost, (uint32_t)m_cost, 1);
+}
+
+int PHSx(void *out, size_t outlen, const void *in, size_t inlen, const void *salt, size_t saltlen, 
+	unsigned int t_cost, unsigned int m_cost, unsigned int m_thread)
 {
-	return ArgonFast64Ext((uint8_t*)out, outlen, (const uint8_t*)in, inlen, (const uint8_t*)salt, saltlen, NULL, 0, NULL,0,t_cost, m_cost, thread_n);
+	return ArgonFast64Ext((uint8_t*)out, (uint32_t)outlen, (const uint8_t*)in, (uint32_t)inlen, (const uint8_t*)salt, (uint32_t)saltlen, NULL, 0, NULL, 0, (uint32_t)t_cost, (uint32_t)m_cost, (uint32_t)m_thread);
 }
Index: argon/Argon-Optimized/Linux-AES-NI/genkat.cpp
===================================================================
--- argon.orig/Argon-Optimized/Linux-AES-NI/genkat.cpp	2015-03-15 09:04:31.602944982 +0100
+++ argon/Argon-Optimized/Linux-AES-NI/genkat.cpp	2015-03-15 09:04:40.010993621 +0100
@@ -135,7 +135,7 @@ void Run(void *out, size_t outlen, size_
 	unsigned char one_array[256];
 	memset(one_array, 1, 256);
 
-	PHS(out, outlen, zero_array, inlen, one_array, saltlen, t_cost, m_cost, thread_n);
+	PHSx(out, outlen, zero_array, inlen, one_array, saltlen, t_cost, m_cost, thread_n);
 
 #ifdef _MEASURE
 	i3 = __rdtscp(&ui3);
