---
 Lyra2.c     |   25 ++++++++++++++++---------
 Lyra2.h     |    8 ++++----
 Makefile    |    4 ++--
 sse/Lyra2.c |   24 +++++++++++++++---------
 sse/Lyra2.h |    8 ++++----
 5 files changed, 41 insertions(+), 28 deletions(-)

Index: lyra2/Lyra2.c
===================================================================
--- lyra2.orig/Lyra2.c	2015-04-30 17:32:14.280256621 +0200
+++ lyra2/Lyra2.c	2015-04-30 17:33:32.400398174 +0200
@@ -27,6 +27,8 @@
 #include "Sponge.h"
 #include "sse/Lyra2.h"
 
+uint32_t nPARALLEL = 1;
+
 /**
  * Executes Lyra2 based on the G function from Blake2b or BlaMka. The number of columns of the memory matrix is set to nCols = N_COLS.
  * This version supports salts and passwords whose combined length is smaller than the size of the memory matrix,
@@ -47,10 +49,18 @@
  * @return 0 if the key is generated correctly; -1 if there is an error (usually due to lack of memory for allocation)
  */
 int PHS(void *out, size_t outlen, const void *in, size_t inlen, const void *salt, size_t saltlen, unsigned int t_cost, unsigned int m_cost) {
-    return LYRA2(out, outlen, in, inlen, salt, saltlen, t_cost, m_cost, N_COLS);
+    nPARALLEL = 1;
+    return LYRA2_singleThread(out, outlen, in, inlen, salt, saltlen, t_cost, m_cost, N_COLS);
+}
+
+int PHSx(void *out, size_t outlen, const void *in, size_t inlen, const void *salt, size_t saltlen, unsigned int t_cost, unsigned int m_cost, unsigned int m_thread) {
+    nPARALLEL = m_thread;
+    if(m_thread == 1) {
+        return LYRA2_singleThread(out, outlen, in, inlen, salt, saltlen, t_cost, m_cost, N_COLS);
+    }
+    return LYRA2_multiThread(out, outlen, in, inlen, salt, saltlen, t_cost, m_cost, N_COLS);
 }
 
-#if (nPARALLEL == 1)
 /**
  * Executes Lyra2 based on the G function from Blake2b or BlaMka. This version supports salts and passwords
  * whose combined length is smaller than the size of the memory matrix, (i.e., (nRows x nCols x b) bits,
@@ -70,7 +80,7 @@ int PHS(void *out, size_t outlen, const
  *
  * @return 0 if the key is generated correctly; -1 if there is an error (usually due to lack of memory for allocation)
  */
-int LYRA2(void *K, unsigned int kLen, const void *pwd, unsigned int pwdlen, const void *salt, unsigned int saltlen, unsigned int timeCost, unsigned int nRows, unsigned int nCols) {
+int LYRA2_singleThread(void *K, unsigned int kLen, const void *pwd, unsigned int pwdlen, const void *salt, unsigned int saltlen, unsigned int timeCost, unsigned int nRows, unsigned int nCols) {
     //============================= Basic variables ============================//
     int64_t gap = 1;            //Modifier to the step, assuming the values 1 or -1
     uint64_t step = 1;          //Visitation step (used during Setup to dictate the sequence in which rows are read)
@@ -255,9 +265,7 @@ int LYRA2(void *K, unsigned int kLen, co
 
     return 0;
 }
-#endif
 
-#if (nPARALLEL > 1)
 /**
  * Executes Lyra2 based on the G function from Blake2b or BlaMka. This version supports salts and passwords
  * whose combined length is smaller than the size of the memory matrix, (i.e., (nRows x nCols x b) bits,
@@ -277,7 +285,7 @@ int LYRA2(void *K, unsigned int kLen, co
  *
  * @return 0 if the key is generated correctly; -1 if there is an error (usually due to lack of memory for allocation)
  */
-int LYRA2(void *K, unsigned int kLen, const void *pwd, unsigned int pwdlen, const void *salt, unsigned int saltlen, unsigned int timeCost, unsigned int nRows, unsigned int nCols) {
+int LYRA2_multiThread(void *K, unsigned int kLen, const void *pwd, unsigned int pwdlen, const void *salt, unsigned int saltlen, unsigned int timeCost, unsigned int nRows, unsigned int nCols) {
     //============================= Basic variables ============================//
     int64_t i,j;        //auxiliary iteration counter
     //==========================================================================/
@@ -300,11 +308,11 @@ int LYRA2(void *K, unsigned int kLen, co
       return -1;
 
 #if _OPENMP <= 201107  //OpenMP 3.X or less 
-    #pragma omp parallel num_threads(nPARALLEL) default(none) /*private(pwd)*/ shared(memMatrix,  pKeys, pwd, pwdlen, salt, saltlen, nRows, nCols, kLen, timeCost)
+    #pragma omp parallel num_threads(nPARALLEL) default(none) /*private(pwd)*/ shared(memMatrix,  pKeys, pwd, pwdlen, salt, saltlen, nRows, nCols, kLen, timeCost, nPARALLEL)
 #endif // _OPENMP
 
 #if _OPENMP > 201107  //OpenMP 4.0
-    #pragma omp parallel proc_bind(spread) num_threads(nPARALLEL) default(none) /*private(pwd)*/ shared(memMatrix,  pKeys, pwd, pwdlen, salt, saltlen, nRows, nCols, kLen, timeCost)
+    #pragma omp parallel proc_bind(spread) num_threads(nPARALLEL) default(none) /*private(pwd)*/ shared(memMatrix,  pKeys, pwd, pwdlen, salt, saltlen, nRows, nCols, kLen, timeCost, nPARALLEL)
 #endif // _OPENMP
     {
         //============================= Basic threads variables ============================//
@@ -563,4 +571,3 @@ int LYRA2(void *K, unsigned int kLen, co
 
     return 0;
 }
-#endif
\ No newline at end of file
Index: lyra2/Lyra2.h
===================================================================
--- lyra2.orig/Lyra2.h	2015-04-30 17:32:14.280256621 +0200
+++ lyra2/Lyra2.h	2015-04-30 17:33:32.400398174 +0200
@@ -26,15 +26,15 @@ typedef unsigned char byte ;
         #define N_COLS 256                                      //Number of columns in the memory matrix: fixed to 256 by default
 #endif
 
-#ifndef nPARALLEL
-        #define nPARALLEL 2                                     //Number of parallel threads
-#endif
+extern uint32_t nPARALLEL;
 
 #define ROW_LEN_INT64 (BLOCK_LEN_INT64 * N_COLS)                //Total length of a row: N_COLS blocks
 #define ROW_LEN_BYTES (ROW_LEN_INT64 * 8)                       //Number of bytes per row
 
-int LYRA2(void *K, unsigned int kLen, const void *pwd, unsigned int pwdlen, const void *salt, unsigned int saltlen, unsigned int timeCost, unsigned int nRows, unsigned int nCols);
+int LYRA2_singleThread(void *K, unsigned int kLen, const void *pwd, unsigned int pwdlen, const void *salt, unsigned int saltlen, unsigned int timeCost, unsigned int nRows, unsigned int nCols);
+int LYRA2_multiThread(void *K, unsigned int kLen, const void *pwd, unsigned int pwdlen, const void *salt, unsigned int saltlen, unsigned int timeCost, unsigned int nRows, unsigned int nCols);
 
 int PHS(void *out, size_t outlen, const void *in, size_t inlen, const void *salt, size_t saltlen, unsigned int t_cost, unsigned int m_cost);
+int PHSx(void *out, size_t outlen, const void *in, size_t inlen, const void *salt, size_t saltlen, unsigned int t_cost, unsigned int m_cost, unsigned int m_thread);
 
 #endif /* LYRA2_H_ */
Index: lyra2/Makefile
===================================================================
--- lyra2.orig/Makefile	2015-04-30 17:32:14.280256621 +0200
+++ lyra2/Makefile	2015-04-30 17:33:32.400398174 +0200
@@ -1,6 +1,6 @@
 CC=gcc
-CPPFLAGS_REF=-std=c99 -Wall -pedantic -O2 -fopenmp -DnPARALLEL=1
-CPPFLAGS_SSE=-std=c99 -Wall -pedantic -O3 -msse2 -ftree-vectorizer-verbose=1 -fopenmp -funroll-loops -march=native -Ofast -mprefer-avx128 -Wno-unused-variable -DnPARALLEL=1
+CPPFLAGS_REF=-std=c99 -Wall -pedantic -O2 -fopenmp
+CPPFLAGS_SSE=-std=c99 -Wall -pedantic -O3 -msse2 -ftree-vectorizer-verbose=1 -fopenmp -funroll-loops -march=native -Ofast -mprefer-avx128 -Wno-unused-variable
 
 TARGETS=lyra2.a lyra2-sse.a
 
Index: lyra2/sse/Lyra2.c
===================================================================
--- lyra2.orig/sse/Lyra2.c	2015-04-30 17:32:14.280256621 +0200
+++ lyra2/sse/Lyra2.c	2015-04-30 17:33:32.400398174 +0200
@@ -26,6 +26,8 @@
 #include "Lyra2.h"
 #include "Sponge.h"
 
+unsigned int nPARALLEL = 1;
+
 /**
  * Executes Lyra2 based on the G function from Blake2b or BlaMka. The number of columns of the memory matrix is set to nCols = N_COLS.
  * This version supports salts and passwords whose combined length is smaller than the size of the memory matrix,
@@ -45,10 +47,17 @@
  * @return 0 if the key is generated correctly; -1 if there is an error (usually due to lack of memory for allocation)
  */
 int PHS(void *out, size_t outlen, const void *in, size_t inlen, const void *salt, size_t saltlen, unsigned int t_cost, unsigned int m_cost){
-    return LYRA2(out, outlen, in, inlen, salt, saltlen, t_cost, m_cost, N_COLS);
+    nPARALLEL = 1;
+    return LYRA2_singleThread(out, outlen, in, inlen, salt, saltlen, t_cost, m_cost, N_COLS);
+}
+int PHSx(void *out, size_t outlen, const void *in, size_t inlen, const void *salt, size_t saltlen, unsigned int t_cost, unsigned int m_cost, unsigned int m_thread){
+    nPARALLEL = m_thread;
+    if(m_thread == 1) {
+        return LYRA2_singleThread(out, outlen, in, inlen, salt, saltlen, t_cost, m_cost, N_COLS);
+    }
+    return LYRA2_multiThread(out, outlen, in, inlen, salt, saltlen, t_cost, m_cost, N_COLS);
 }
 
-#if (nPARALLEL == 1)
 /**
  * Executes Lyra2 based on the G function from Blake2b or BlaMka. This version supports salts and passwords
  * whose combined length is smaller than the size of the memory matrix, (i.e., (nRows x nCols x b) bits,
@@ -68,7 +77,7 @@ int PHS(void *out, size_t outlen, const
  *
  * @return 0 if the key is generated correctly; -1 if there is an error (usually due to lack of memory for allocation)
  */
-int LYRA2(void *K, unsigned int kLen, const void *pwd, unsigned int pwdlen, const void *salt, unsigned int saltlen, unsigned int timeCost, unsigned int nRows, unsigned int nCols){
+int LYRA2_singleThread(void *K, unsigned int kLen, const void *pwd, unsigned int pwdlen, const void *salt, unsigned int saltlen, unsigned int timeCost, unsigned int nRows, unsigned int nCols){
     //============================= Basic variables ============================//
     int64_t gap = 1;            //Modifier to the step, assuming the values 1 or -1
     uint64_t step = 1;          //Visitation step (used during Setup to dictate the sequence in which rows are read)
@@ -252,9 +261,7 @@ int LYRA2(void *K, unsigned int kLen, co
 
     return 0;
 }
-#endif
 
-#if (nPARALLEL > 1)
 /**
  * Executes Lyra2 based on the G function from Blake2b or BlaMka. This version supports salts and passwords
  * whose combined length is smaller than the size of the memory matrix, (i.e., (nRows x nCols x b) bits,
@@ -274,7 +281,7 @@ int LYRA2(void *K, unsigned int kLen, co
  *
  * @return 0 if the key is generated correctly; -1 if there is an error (usually due to lack of memory for allocation)
  */
-int LYRA2(void *K, unsigned int kLen, const void *pwd, unsigned int pwdlen, const void *salt, unsigned int saltlen, unsigned int timeCost, unsigned int nRows, unsigned int nCols){
+int LYRA2_multiThread(void *K, unsigned int kLen, const void *pwd, unsigned int pwdlen, const void *salt, unsigned int saltlen, unsigned int timeCost, unsigned int nRows, unsigned int nCols){
 
     //============================= Basic variables ============================//
     uint64_t i,j;        //auxiliary iteration counter
@@ -298,11 +305,11 @@ int LYRA2(void *K, unsigned int kLen, co
       return -1;
 
 #if _OPENMP <= 201107  //OpenMP 3.X or less 
-    #pragma omp parallel num_threads(nPARALLEL) default(none) /*private(pwd)*/ shared(memMatrix,  pKeys, pwd, pwdlen, salt, saltlen, nRows, nCols, kLen, timeCost)
+    #pragma omp parallel num_threads(nPARALLEL) default(none) /*private(pwd)*/ shared(memMatrix,  pKeys, pwd, pwdlen, salt, saltlen, nRows, nCols, kLen, timeCost, nPARALLEL)
 #endif // _OPENMP
 
 #if _OPENMP > 201107  //OpenMP 4.0
-    #pragma omp parallel proc_bind(spread) num_threads(nPARALLEL) default(none) /*private(pwd)*/ shared(memMatrix,  pKeys, pwd, pwdlen, salt, saltlen, nRows, nCols, kLen, timeCost)
+    #pragma omp parallel proc_bind(spread) num_threads(nPARALLEL) default(none) /*private(pwd)*/ shared(memMatrix,  pKeys, pwd, pwdlen, salt, saltlen, nRows, nCols, kLen, timeCost, nPARALLEL)
 #endif // _OPENMP
     {
         //============================= Basic threads variables ============================//
@@ -559,4 +566,3 @@ int LYRA2(void *K, unsigned int kLen, co
 
     return 0;
 }
-#endif
\ No newline at end of file
Index: lyra2/sse/Lyra2.h
===================================================================
--- lyra2.orig/sse/Lyra2.h	2015-04-30 17:32:14.280256621 +0200
+++ lyra2/sse/Lyra2.h	2015-04-30 17:33:32.400398174 +0200
@@ -26,9 +26,7 @@ typedef unsigned char byte ;
         #define N_COLS 256                                      //Number of columns in the memory matrix: fixed to 256 by default
 #endif
 
-#ifndef nPARALLEL
-        #define nPARALLEL 2                                     //Number of parallel threads
-#endif
+extern unsigned int nPARALLEL;
 
 #define ROW_LEN_INT64 (BLOCK_LEN_INT64 * N_COLS)                //Total length of a row: N_COLS blocks
 
@@ -37,8 +35,10 @@ typedef unsigned char byte ;
 #define ROW_LEN_BYTES (ROW_LEN_INT64 * 8)                       //Number of bytes per row
 
 
-int LYRA2(void *K, unsigned int kLen, const void *pwd, unsigned int pwdlen, const void *salt, unsigned int saltlen, unsigned int timeCost, unsigned int nRows, unsigned int nCols);
+int LYRA2_singleThread(void *K, unsigned int kLen, const void *pwd, unsigned int pwdlen, const void *salt, unsigned int saltlen, unsigned int timeCost, unsigned int nRows, unsigned int nCols);
+int LYRA2_multiThread(void *K, unsigned int kLen, const void *pwd, unsigned int pwdlen, const void *salt, unsigned int saltlen, unsigned int timeCost, unsigned int nRows, unsigned int nCols);
 
 int PHS(void *out, size_t outlen, const void *in, size_t inlen, const void *salt, size_t saltlen, unsigned int t_cost, unsigned int m_cost);
+int PHSx(void *out, size_t outlen, const void *in, size_t inlen, const void *salt, size_t saltlen, unsigned int t_cost, unsigned int m_cost, unsigned int m_thread);
 
 #endif /* LYRA2_H_ */
