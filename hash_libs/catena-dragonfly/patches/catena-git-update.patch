Update to Catena git commit 4117ca42323047a2a4bd4a6af9f302a3cc7b0fe7.
---
 catena-BRG.c          |   28 +--------------
 catena-DBG.c          |   27 ++------------
 catena-blake2b-ref.c  |   10 ++++-
 catena-blake2b-sse.c  |   10 ++++-
 catena-helpers.c      |   91 ++++++++++++++++++++++++++++++++++++++++++++++++--
 catena-helpers.h      |   23 +++++++++---
 catena.c              |   89 ++++++++++++++++++++++++++++++++++++++++--------
 catena.h              |   24 +++++++++----
 catena_test_vectors.c |    2 -
 test-catena.c         |    4 +-
 10 files changed, 224 insertions(+), 84 deletions(-)

Index: catena-butterfly/catena-BRG.c
===================================================================
--- catena-butterfly.orig/catena-BRG.c	2015-04-13 16:49:52.213758705 +0200
+++ catena-butterfly/catena-BRG.c	2015-04-13 16:40:47.000000000 +0200
@@ -29,37 +29,15 @@ void Flap(const uint8_t x[H_LEN], const
   const uint8_t *salt, const uint8_t saltlen, uint8_t h[H_LEN])
 {
   const uint64_t c = UINT64_C(1) << garlic;
-  const uint64_t q = UINT64_C(1) << ((3*garlic+3)/4);
   uint8_t *r = malloc(c*H_LEN);
-  uint8_t *tmp = malloc(H_LEN);
-  uint8_t *tmp2 = malloc(H_LEN);
-  uint64_t i, j, j2;
+  uint64_t i;
   uint8_t k;
 
-  __Hash1(x, H_LEN, r);
-
   /* Top row */
-  memcpy(tmp, x, H_LEN);
-  tmp[H_LEN-1] ^= 1;
-  __Hash2(x, H_LEN, tmp, H_LEN, r); //v_0 <- H(x||xXOR1)
-  __ResetState();
-  __HashFast(1, r, x, r+H_LEN); //v_1 <- H'(v_0||x)
-  for(i = 2; i < c; i++){
-    __HashFast(i, r + (i-1)*H_LEN, r + (i-2)*H_LEN, r + i*H_LEN);
-  }
+  initmem(x, c, r);
 
   /*Gamma Function*/
-  __Hash1(salt, saltlen, tmp);  //tmp <- H(S)
-  __Hash1(tmp, H_LEN, tmp2);    //tmp2 <- H(H(S))
-  initXSState(tmp, tmp2);
-
-  __ResetState();
-  for(i = 0; i < q; i++){
-    j = xorshift1024star() >> (64 - garlic);
-    j2 = xorshift1024star() >> (64 - garlic);
-    //v_j1= H'(v_j1||v_j2)
-    __HashFast(i, r + j * H_LEN, r + j2 * H_LEN, r + j * H_LEN); 
-  }
+  gamma(garlic, salt, saltlen, r);
 
   /* BRH */
   for (k = 0; k < lambda; k++) {
Index: catena-butterfly/catena-DBG.c
===================================================================
--- catena-butterfly.orig/catena-DBG.c	2015-04-13 16:49:52.213758705 +0200
+++ catena-butterfly/catena-DBG.c	2015-04-13 16:40:47.000000000 +0200
@@ -55,38 +55,19 @@ void Flap(const uint8_t x[H_LEN], const
   const uint64_t c = UINT64_C(1) << garlic;
   const uint64_t m = UINT64_C(1) << (garlic-1); //0.5 * 2^g
   const uint32_t l = 2 * garlic;
-  const uint64_t q = UINT64_C(1) << ((3*garlic+3)/4);
 
   uint8_t *r   = malloc((c+m)*H_LEN);
   uint8_t *tmp = malloc(H_LEN);
-  uint8_t *tmp2 = malloc(H_LEN);
-  uint64_t i,j,j2;
+  uint64_t i,j;
   uint8_t k;
   uint8_t co = 0; //carry over from last iteration
 
 
   /* Top row */
-  memcpy(tmp, x, H_LEN);
-  tmp[H_LEN-1] ^= 1;
-  __Hash2(x, H_LEN, tmp, H_LEN, r); //v_0 <- H(x||xXOR1)
-  __ResetState();
-  __HashFast(1, r, x, r+H_LEN); //v_1 <- H'(v_0||x)
-  for(i = 2; i < c; i++){
-    __HashFast(i, r + (i-1)*H_LEN, r + (i-2)*H_LEN, r + i*H_LEN);
-  }
+  initmem(x, c, r);
 
   /*Gamma Function*/
-  __Hash1(salt, saltlen, tmp);  //tmp <- H(S)
-  __Hash1(tmp, H_LEN, tmp2);    //tmp2 <- H(H(S))
-  initXSState(tmp, tmp2);
-
-  __ResetState();
-  for(i = 0; i < q; i++){
-    j = xorshift1024star() >> (64 - garlic);
-    j2 = xorshift1024star() >> (64 - garlic);
-    //v_j1= H'(v_j1||v_j2)
-    __HashFast(i, r + j * H_LEN, r + j2 * H_LEN, r + j * H_LEN); 
-  }
+  gamma(garlic, salt, saltlen, r);
 
   /* DBH */
   for (k = 0; k < lambda; k++) {
@@ -97,7 +78,7 @@ void Flap(const uint8_t x[H_LEN], const
 
       //r0 := H(tmp || vsigma(g,i-1,0) )
       __Hash2(tmp, H_LEN, r+idx(i-1,sigma(garlic,i-1,0),co,c,m) * H_LEN, H_LEN,
-	      r+idx(i,0,co,c,m) *H_LEN);
+	       r+idx(i,0,co,c,m) *H_LEN);
       __ResetState();
 
       //vertices
Index: catena-butterfly/catena-blake2b-ref.c
===================================================================
--- catena-butterfly.orig/catena-blake2b-ref.c	2015-04-13 16:49:52.213758705 +0200
+++ catena-butterfly/catena-blake2b-ref.c	2015-04-13 16:40:47.000000000 +0200
@@ -1,4 +1,10 @@
 #include "catena.h"
+//Loading in blake2b is faster on little endian
+#if __BYTE_ORDER == __LITTLE_ENDIAN
+#ifndef NATIVE_LITTLE_ENDIAN
+  #define NATIVE_LITTLE_ENDIAN
+#endif
+#endif
 #include "blake2-ref/blake2.h"
 #include "hash.h"
 
@@ -223,7 +229,7 @@ void __HashFast(int vindex, const uint8_
   memcpy(hash, buffer, H_LEN );
 }
 
-void __ResetState(){
+void __ResetState(void){
   blake2b_init(&_state,H_LEN);
 }
 
@@ -236,5 +242,5 @@ void __HashFast(int vindex, const uint8_
 }
 #pragma GCC diagnostic warning "-Wunused-parameter"
 
-void __ResetState(){}
+void __ResetState(void){}
 #endif
\ No newline at end of file
Index: catena-butterfly/catena-blake2b-sse.c
===================================================================
--- catena-butterfly.orig/catena-blake2b-sse.c	2015-04-13 16:49:52.213758705 +0200
+++ catena-butterfly/catena-blake2b-sse.c	2015-04-13 16:40:47.000000000 +0200
@@ -1,4 +1,10 @@
 #include "catena.h"
+//Loading in blake2b is faster on little endian
+#if __BYTE_ORDER == __LITTLE_ENDIAN
+#ifndef NATIVE_LITTLE_ENDIAN
+  #define NATIVE_LITTLE_ENDIAN
+#endif
+#endif
 #include "blake2-sse/blake2.h"
 #include "hash.h"
 
@@ -234,7 +240,7 @@ void __HashFast(int vindex, const uint8_
   memcpy(hash, &_state.h[0], H_LEN);
 }
 
-void __ResetState(){
+void __ResetState(void){
   blake2b_init(&_state,H_LEN);
 }
 
@@ -247,5 +253,5 @@ void __HashFast(int vindex, const uint8_
 }
 #pragma GCC diagnostic warning "-Wunused-parameter"
 
-void __ResetState(){}
+void __ResetState(void){}
 #endif
\ No newline at end of file
Index: catena-butterfly/catena-helpers.c
===================================================================
--- catena-butterfly.orig/catena-helpers.c	2015-04-13 16:49:52.213758705 +0200
+++ catena-butterfly/catena-helpers.c	2015-04-13 16:40:47.000000000 +0200
@@ -5,11 +5,57 @@
 #include <emmintrin.h>
 #endif 
 
+#include "hash.h"
 #include "catena-helpers.h"
 
 const uint8_t ZERO8[H_LEN] = {0}; //H_LEN 0s
 
 
+inline void initmem(const uint8_t x[H_LEN], const uint64_t c, uint8_t *r)
+{
+  uint8_t *tmp = malloc(H_LEN);
+
+  memcpy(tmp, x, H_LEN);
+  tmp[H_LEN-1] ^= 1;
+  __Hash2(x, H_LEN, tmp, H_LEN, r); //v_0 <- H(x||xXOR1)
+  __ResetState();
+
+  __HashFast(1, r, x, r+H_LEN); //v_1 <- H'(v_0||x)
+  
+  for(uint64_t i = 2; i < c; i++){
+    __HashFast(i, r + (i-1)*H_LEN, r + (i-2)*H_LEN, r + i*H_LEN);
+  }
+
+  free(tmp);
+}
+
+
+inline void gamma(const uint8_t garlic, const uint8_t *salt, 
+                  const uint8_t saltlen, uint8_t *r)
+{
+  const uint64_t q = UINT64_C(1) << ((3*garlic+3)/4);
+
+  uint64_t i, j, j2;
+  uint8_t *tmp = malloc(H_LEN);
+  uint8_t *tmp2 = malloc(H_LEN);
+
+  __Hash1(salt, saltlen, tmp);  //tmp <- H(S)
+  __Hash1(tmp, H_LEN, tmp2);    //tmp2 <- H(H(S))
+  initXSState(tmp, tmp2);
+  
+  __ResetState();
+  for(i = 0; i < q; i++){
+    j = xorshift1024star() >> (64 - garlic);
+    j2 = xorshift1024star() >> (64 - garlic);
+    //v_j1= H'(v_j1||v_j2)
+    __HashFast(i, r + j * H_LEN, r + j2 * H_LEN, r + j * H_LEN); 
+  }
+
+  free(tmp);
+  free(tmp2);
+}
+
+
 void XOR(const uint8_t *input1, const uint8_t *input2, uint8_t *output)
 {
 #ifdef __SSE2__
@@ -34,9 +80,20 @@ static int p;
 static uint64_t s[16];
 
 void initXSState(const uint8_t* a, const uint8_t* b){
-	p = 0;
-	memcpy(s, a, H_LEN);
-	memcpy(&s[8], b, H_LEN);
+  p = 0;
+  //endianess independet equivalent to
+  // memcpy(s, a, H_LEN);
+  // memcpy(&s[8], b, H_LEN);
+  //on little endian
+  for(int i = 0; i < 8; i++){
+    s[i] = UINT64_C(0);
+    s[i+8] = UINT64_C(0);
+
+    for(int j = 0; j < 8; j++){
+      s[i] |= ((uint64_t)a[i*8+j]) << j*8;
+      s[i+8] |= ((uint64_t)b[i*8+j]) << j*8;
+    }
+  }
 }
 
 uint64_t xorshift1024star() {
@@ -46,4 +103,32 @@ uint64_t xorshift1024star() {
 	s1 ^= s1 >> 11; // b
 	s0 ^= s0 >> 30; // c
 	return ( s[p] = s0 ^ s1 ) * UINT64_C(1181783497276652981);
+}
+
+
+/* Our tests showed the memset to be always executed independent of 
+* optimization. To ensure it stays that way, enable the no optimization flags.
+*/
+void 
+#if defined(__clang__)
+#if __has_attribute(optnone)
+ __attribute__((optnone))
+#endif //end has attribute
+
+#elif defined(__GNUC__)
+
+#define GCC_VERSION (__GNUC__ * 10000 \
+                    + __GNUC_MINOR__ * 100 \
+                    + __GNUC_PATCHLEVEL__)
+//only supported by GCC >= 4.4
+#if GCC_VERSION >= 40400
+  __attribute__((optimize("O0")))
+#endif //end GCC >= 4.4
+
+#endif //end compiler_id
+
+erasepwd(uint8_t* pwd, const uint32_t pwdlen)
+{
+  memset((char *)pwd, 0, pwdlen);
+  free(pwd);
 }
\ No newline at end of file
Index: catena-butterfly/catena-helpers.h
===================================================================
--- catena-butterfly.orig/catena-helpers.h	2015-04-13 16:49:52.213758705 +0200
+++ catena-butterfly/catena-helpers.h	2015-04-13 16:40:47.000000000 +0200
@@ -5,23 +5,36 @@
 
 extern const uint8_t ZERO8[H_LEN/sizeof(uint8_t)]; //H_LEN 0s
 
-union v8_v64
-{
-	uint8_t v8[H_LEN];
-	uint64_t v64[H_LEN/8];
-};
+
+/* Initialize the top row/memory for Catena-Dragonfly and Butterfly
+*/
+inline void initmem(const uint8_t x[H_LEN], const uint64_t c, uint8_t *r);
+
+
+/* Gamma function for Catena-Dragonfly and Butterfly
+*/
+inline void gamma(const uint8_t garlic, const uint8_t *salt, 
+                  const uint8_t saltlen, uint8_t *r);
+
 
 /* Writes the XOR of the H_LEN long sequences input1 and input2  to output
 * Uses Intrinsic to speed up computation when SSE2 is avaiable
 */
 void XOR(const uint8_t *input1, const uint8_t *input2, uint8_t *output);
 
+
 /* Init the state for Xorshift with two 512bit values
  */
 void initXSState(const uint8_t* a, const uint8_t* b);
 
+
 /*  Xorshift RNG with a 1024bit state that must be seeded first.
  */
 uint64_t xorshift1024star();
 
+
+/* Safely erase the pwd by making sure the compiler isn't skipping this step
+ */
+void erasepwd(uint8_t* pwd, const uint32_t pwdlen);
+
 #endif
\ No newline at end of file
Index: catena-butterfly/catena.c
===================================================================
--- catena-butterfly.orig/catena.c	2015-04-13 16:49:52.213758705 +0200
+++ catena-butterfly/catena.c	2015-04-13 16:40:47.000000000 +0200
@@ -6,30 +6,37 @@
 #define __STDC_CONSTANT_MACROS
 #include <stdint.h>
 
-#ifdef __SSE2__
-#include <emmintrin.h>
-#endif 
-
 #include "catena.h"
 #include "catena-helpers.h"
 #include "hash.h"
 
-#ifdef ARC_BIG_ENDIAN
+#if __BYTE_ORDER == __LITTLE_ENDIAN
+  #define TO_LITTLE_ENDIAN_64(n) (n)
+  #define TO_LITTLE_ENDIAN_32(n) (n)
+#elif __BYTE_ORDER == __BIG_ENDIAN
   #define TO_LITTLE_ENDIAN_64(n) bswap_64(n)
   #define TO_LITTLE_ENDIAN_32(n) bswap_32(n)
 #else
+  #warning "byte order couldn't be detected. This affects key generation and keyed hashing"
   #define TO_LITTLE_ENDIAN_64(n) (n)
   #define TO_LITTLE_ENDIAN_32(n) (n)
 #endif
 
+/* Ensure that a pointer passed to the PHS interface stays const
+ */
+#ifdef OVERWRITE
+  #define MAYBECONST 
+#else
+  #define MAYBECONST const
+#endif
 
 /***************************************************/
 
-int __Catena(const uint8_t *pwd,   const uint32_t pwdlen,
+int __Catena(MAYBECONST uint8_t *pwd,   const uint32_t pwdlen,
 	     const uint8_t *salt,  const uint8_t  saltlen,
 	     const uint8_t *data,  const uint32_t datalen,
 	     const uint8_t lambda, const uint8_t  min_garlic,
-	     const uint8_t garlic, const size_t  hashlen,
+	     const uint8_t garlic, const uint8_t  hashlen,
 	     const uint8_t client, const uint8_t  tweak_id, uint8_t *hash)
 {
   uint8_t x[H_LEN];
@@ -38,7 +45,7 @@ int __Catena(const uint8_t *pwd,   const
   uint8_t c;
 
   if((hashlen > H_LEN) || (garlic > 63) || (min_garlic > garlic) || 
-    (lambda == 0)){
+    (lambda == 0) || (garlic == 0)){
      return -1;
   }
 
@@ -57,6 +64,11 @@ int __Catena(const uint8_t *pwd,   const
   /* Compute the initial value to hash  */
   __Hash5(hv, H_LEN, t, 4, x, H_LEN, pwd,  pwdlen, salt, saltlen, x);
 
+  /*Overwrite Password if enabled*/
+#ifdef OVERWRITE
+  erasepwd(pwd,pwdlen);
+#endif
+
   Flap(x, lambda, (min_garlic+1)/2, salt, saltlen, x);
 
   for(c=min_garlic; c <= garlic; c++)
@@ -78,7 +90,7 @@ int __Catena(const uint8_t *pwd,   const
 
 /***************************************************/
 
-int Catena(const uint8_t *pwd,   const uint32_t pwdlen,
+int Catena(uint8_t *pwd,   const uint32_t pwdlen,
 	   const uint8_t *salt,  const uint8_t  saltlen,
 	   const uint8_t *data,  const uint32_t datalen,
 	   const uint8_t lambda, const uint8_t  min_garlic,
@@ -94,7 +106,7 @@ int Catena(const uint8_t *pwd,   const u
 /***************************************************/
 
 
-int Naive_Catena(const char *pwd,  const char *salt, const char *data,
+int Naive_Catena(char *pwd,  const char *salt, const char *data,
 		  uint8_t hash[H_LEN])
 {
   return __Catena( (uint8_t  *) pwd, strlen(pwd),
@@ -107,7 +119,7 @@ int Naive_Catena(const char *pwd,  const
 /***************************************************/
 
 
-int Simple_Catena(const uint8_t *pwd,   const uint32_t pwdlen,
+int Simple_Catena(uint8_t *pwd,   const uint32_t pwdlen,
 		  const uint8_t *salt,  const uint8_t  saltlen,
 		  const uint8_t *data,  const uint32_t datalen,
 		  uint8_t hash[H_LEN])
@@ -120,7 +132,7 @@ int Simple_Catena(const uint8_t *pwd,
 
 /***************************************************/
 
-int Catena_Client(const uint8_t  *pwd,   const uint32_t pwdlen,
+int Catena_Client(uint8_t  *pwd,   const uint32_t pwdlen,
 		  const uint8_t  *salt,  const uint8_t  saltlen,
 		  const uint8_t  *data,  const uint32_t datalen,
 		  const uint8_t lambda, const uint8_t  min_garlic,
@@ -168,10 +180,48 @@ void CI_Update(const uint8_t *old_hash,
   memcpy(new_hash,x,hashlen);
 }
 
+/***************************************************/
+
+void CI_Keyed_Update(const uint8_t *old_hash,  const uint8_t lambda,
+            const uint8_t *salt,      const uint8_t saltlen,
+            const uint8_t old_garlic, const uint8_t new_garlic,
+            const uint8_t hashlen,    const uint8_t *key,
+            const uint64_t uuid,      uint8_t *new_hash)
+{
+  uint8_t keystream[H_LEN];
+  uint64_t tmp = TO_LITTLE_ENDIAN_64(uuid);
+  uint8_t c;
+  uint8_t x[H_LEN];
+
+  memcpy(x, old_hash, hashlen);
+  memset(x+hashlen, 0, H_LEN-hashlen);
+
+  __Hash4(key, KEY_LEN,  (uint8_t*) &tmp, 8, &old_garlic, sizeof(uint8_t), key, 
+      KEY_LEN, keystream);
+
+  //decrypt the old hash
+  for(int i=0; i<hashlen; i++) x[i] ^= keystream[i];
+
+  for(c=old_garlic+1; c <= new_garlic; c++)
+  {
+      Flap(x, lambda, c, salt, saltlen, x);
+      __Hash2(&c,1,x, H_LEN, x);
+      memset(x+hashlen, 0, H_LEN-hashlen);
+  }
+
+  __Hash4(key, KEY_LEN,  (uint8_t*) &tmp, 8, &new_garlic, sizeof(uint8_t), key, 
+      KEY_LEN, keystream);
+
+  //encrypt the new hash
+  for(int i=0; i<hashlen; i++) x[i] ^= keystream[i];
+
+  memcpy(new_hash,x,hashlen);
+}
+
 
 /***************************************************/
 
-void Catena_KG(const uint8_t *pwd,   const uint32_t pwdlen,
+void Catena_KG(uint8_t *pwd,   const uint32_t pwdlen,
 	       const uint8_t *salt,  const uint8_t saltlen,
 	       const uint8_t *data,  const uint32_t datalen,
 	       const uint8_t lambda, const uint8_t  min_garlic,
@@ -207,7 +257,7 @@ void Catena_KG(const uint8_t *pwd,   con
 
 /***************************************************/
 
-void Catena_Keyed_Hashing(const uint8_t *pwd,   const uint32_t pwdlen,
+void Catena_Keyed_Hashing(uint8_t *pwd,   const uint32_t pwdlen,
 			  const uint8_t *salt,  const uint8_t saltlen,
 			  const uint8_t *data,  const uint32_t datalen,
 			  const uint8_t lambda, const uint8_t  min_garlic,
@@ -223,17 +273,24 @@ void Catena_Keyed_Hashing(const uint8_t
 	    lambda, min_garlic, garlic, hashlen,
 	    REGULAR, PASSWORD_HASHING_MODE, chash);
 
-   __Hash3(key, KEY_LEN,  (uint8_t*) &tmp, 8, key, KEY_LEN, keystream);
+   __Hash4(key, KEY_LEN,  (uint8_t*) &tmp, 8, &garlic, sizeof(uint8_t), key, 
+      KEY_LEN, keystream);
 
    for(i=0; i<hashlen; i++) chash[i] ^= keystream[i];
 }
 
+
 /***************************************************/
 #pragma GCC diagnostic ignored "-Wunused-parameter"
 int PHS(void *out, size_t outlen,  const void *in, size_t inlen,
 	   const void *salt, size_t saltlen, unsigned int t_cost,
 	   unsigned int m_cost) {
-  return __Catena((uint8_t * )in, inlen, salt, saltlen, (const uint8_t *)
+  //check range of parameters against the parameter types of __Catena
+  if((outlen > UINT8_MAX) || (inlen > UINT32_MAX) || (saltlen > UINT32_MAX) || 
+      (t_cost > UINT8_MAX) || (m_cost > UINT8_MAX)){
+    return 1;
+  }
+  return __Catena((const uint8_t * )in, inlen, salt, saltlen, (const uint8_t *)
 		  "", 0, t_cost, m_cost, m_cost, outlen, REGULAR,
 		  PASSWORD_HASHING_MODE, out);
 }
Index: catena-butterfly/catena.h
===================================================================
--- catena-butterfly.orig/catena.h	2015-04-13 16:49:52.213758705 +0200
+++ catena-butterfly/catena.h	2015-04-13 16:40:47.000000000 +0200
@@ -3,6 +3,7 @@
 
 #include <stdint.h>
 #include <string.h>
+#include <endian.h>
 
 /* The default unit for all length values are bytes */
 
@@ -29,7 +30,7 @@ void Flap(const uint8_t x[H_LEN], const
 	const uint8_t *salt, const uint8_t saltlen, uint8_t h[H_LEN]);
 
 /* Returns -1 if an an error occurred, otherwise 0. */
-int Catena(const uint8_t *pwd,   const uint32_t pwdlen,
+int Catena(uint8_t *pwd,   const uint32_t pwdlen,
 	   const uint8_t *salt,  const uint8_t  saltlen,
 	   const uint8_t *data,  const uint32_t datalen,
 	   const uint8_t lambda, const uint8_t  min_garlic,
@@ -40,12 +41,12 @@ int Catena(const uint8_t *pwd,   const u
  * are all null-terminated string.
  * Returns -1 if an an error occurred, otherwise 0.
  */
-int Naive_Catena(const char *pwd,  const char *salt, const char *data,
+int Naive_Catena(char *pwd,  const char *salt, const char *data,
 		 uint8_t hash[H_LEN]);
 
 
 /* Returns -1 if an an error occurred, otherwise 0. */
-int Simple_Catena(const uint8_t *pwd,   const uint32_t pwdlen,
+int Simple_Catena(uint8_t *pwd,   const uint32_t pwdlen,
 		   const uint8_t *salt,  const uint8_t  saltlen,
 		   const uint8_t *data,  const uint32_t datalen,
 		   uint8_t hash[H_LEN]);
@@ -54,7 +55,7 @@ int Simple_Catena(const uint8_t *pwd,
 /* Expensive and memory consuming  password hashing part.
  * Returns -1 if an an error occurred, otherwise 0.
  */
-int Catena_Client(const uint8_t *pwd,   const uint32_t pwdlen,
+int Catena_Client(uint8_t *pwd,   const uint32_t pwdlen,
 		  const uint8_t *salt,  const uint8_t  saltlen,
 		  const uint8_t *data,  const uint32_t datalen,
 		  const uint8_t lambda, const uint8_t  min_garlic,
@@ -74,9 +75,15 @@ void CI_Update(const uint8_t *old_hash,
 	       const uint8_t old_garlic, const uint8_t new_garlic,
 	       const uint8_t hashlen, uint8_t *new_hash);
 
+/* Client independent update form an old, keyed hash */
+void CI_Keyed_Update(const uint8_t *old_hash,  const uint8_t lambda,
+			const uint8_t *salt,		const uint8_t saltlen,
+			const uint8_t old_garlic,	const uint8_t new_garlic,
+			const uint8_t hashlen,		const uint8_t *key,
+			const uint64_t uuid,		uint8_t *new_hash);
 
 /* Mode of operation that derives a key from a password */
-void Catena_KG(const uint8_t *pwd,   const uint32_t pwdlen,
+void Catena_KG(uint8_t *pwd,   const uint32_t pwdlen,
 	       const uint8_t *salt,  const uint8_t saltlen,
 	       const uint8_t *data,  const uint32_t datalen,
 	       const uint8_t lambda, const uint8_t  min_garlic,
@@ -86,7 +93,7 @@ void Catena_KG(const uint8_t *pwd,   con
 
 /* Encrypts the password hash with H(key || uuid || key) where
    key denots a KEY_LEN-byte key and uuid denots a *UNIQUE* user ID */
-void Catena_Keyed_Hashing(const uint8_t *pwd,   const uint32_t pwdlen,
+void Catena_Keyed_Hashing(uint8_t *pwd,   const uint32_t pwdlen,
 			  const uint8_t *salt,  const uint8_t  saltlen,
 			  const uint8_t *data,  const uint32_t datalen,
 			  const uint8_t lambda, const uint8_t  min_garlic,
@@ -95,9 +102,14 @@ void Catena_Keyed_Hashing(const uint8_t
 			  uint8_t *chash);
 
 
+//PHS requires the password to be const
+#ifndef OVERWRITE
+
 /* Returns -1 if an an error occurred, otherwise 0. */
 int PHS(void *out, size_t outlen,  const void *in, size_t inlen,
 	const void *salt, size_t saltlen, unsigned int t_cost,
 	unsigned int m_cost);
 
+#endif //end OVERWRITE
+
 #endif
Index: catena-butterfly/catena_test_vectors.c
===================================================================
--- catena-butterfly.orig/catena_test_vectors.c	2015-04-13 16:49:52.213758705 +0200
+++ catena-butterfly/catena_test_vectors.c	2015-04-13 16:40:47.000000000 +0200
@@ -27,7 +27,7 @@ void test_output(const uint8_t *pwd,   c
   uint8_t hash[hashlen];
 
   uint8_t* pwdcpy = malloc(pwdlen);
-  memcpy(pwdcpy, pwd, pwdlen);
+  strncpy((char*)pwdcpy, (char*)pwd, pwdlen);
 
   Catena((uint8_t*)pwdcpy, pwdlen, salt, saltlen, data, datalen,
 	 LAMBDA, garlic, garlic, hashlen, hash);
Index: catena-butterfly/test-catena.c
===================================================================
--- catena-butterfly.orig/test-catena.c	2015-04-13 16:49:52.213758705 +0200
+++ catena-butterfly/test-catena.c	2015-04-13 16:40:47.000000000 +0200
@@ -1,5 +1,6 @@
 #include <stdio.h>
 #include <string.h>
+#include <stdlib.h>
 
 #include "catena.h"
 
@@ -19,7 +20,8 @@ int main()
   const uint8_t salt[SALT_LEN]=
     {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
      0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0XFF};
-  uint8_t password[] = "Password";
+  uint8_t* password = malloc(9);
+  strncpy((char*)password, "Password", 9);
   const char *data     = "I'm a header";
   const uint8_t lambda = LAMBDA;
 #ifdef CATENA_INFO
